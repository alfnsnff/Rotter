name: Build and Deploy Next.js site to DockerHub and GCR

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Build and push to DockerHub
  build_and_push_dockerhub:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      REPO_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

    - name: Detect package manager
      id: detect-package-manager
      run: |
        if [ -f "${{ github.workspace }}/yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
        elif [ -f "${{ github.workspace }}/package.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
        else
          echo "Unable to determine package manager"
          exit 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build the Next.js site
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nextjs-app:latest

  # Build and push to GCR
  build_and_push_gcr:
    runs-on: ubuntu-latest
    needs: build_and_push_dockerhub

    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      REGION: ${{ secrets.REGION }}
      GITHUB_SHA: ${{ github.sha }}
      REPO_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          credentials_json: ${{ secrets.ACTION_GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image for GCR
        run: docker build . --tag gcr.io/${{ secrets.PROJECT_ID }}/${{ github.event.repository.name }}:${{ github.sha }}

      - name: Push to GCR
        run: docker push gcr.io/${{ secrets.PROJECT_ID }}/${{ github.event.repository.name }}:${{ github.sha }}

  # Deploy to Google Cloud Run nad gihtub-pages
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_gcr

    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      REGION: ${{ secrets.REGION }}
      GITHUB_SHA: ${{ github.sha }}
      REPO_NAME: ${{ github.event.repository.name }}

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.3
        with:
          credentials_json: ${{ secrets.ACTION_GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Google Cloud Run
        run: gcloud run deploy ${{ github.event.repository.name }} \
          --image=gcr.io/${{ secrets.PROJECT_ID }}/${{ github.event.repository.name }}:${{ github.sha }} \
          --region=${{ secrets.REGION }} \
          --platform=managed \
          --quiet
